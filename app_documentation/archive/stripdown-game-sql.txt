--
-- Comprehensive SQL Migration Script for Game Backend
-- Generated based on requirements in stripdown-game.txt and codebase analysis
--
-- This script creates all tables, relationships, triggers, functions, and RLS policies
-- for a robust, secure, and extensible game backend using Supabase (Postgres).
--

-- =============================
-- 0. EXTENSIONS & PREREQUISITES
-- =============================

-- Enable UUID generation and other useful extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =============================
-- 1. USER & PROFILE TABLES
-- =============================

-- Table: profiles (extends auth.users)
CREATE TABLE IF NOT EXISTS profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    wallet_address text UNIQUE NOT NULL,
    display_name text,
    avatar_url text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- =============================
-- 2. ADMIN CONFIGURATION
-- =============================

-- Table: admin_game_config (admin-tunable parameters)
CREATE TABLE IF NOT EXISTS admin_game_config (
    key text PRIMARY KEY,
    value jsonb NOT NULL,
    updated_at timestamptz DEFAULT now(),
    updated_by uuid REFERENCES auth.users(id)
);

-- =============================
-- 3. GAME STATE
-- =============================

-- Table: user_game_state (per-user persistent game state)
CREATE TABLE IF NOT EXISTS user_game_state (
    id bigint GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id uuid UNIQUE NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    coins bigint DEFAULT 0,
    total_clicks bigint DEFAULT 0,
    last_click_time timestamptz,
    cooldown_end_time timestamptz,
    streak_days integer DEFAULT 0,
    last_login_date date,
    power_ups jsonb,
    offline_earnings jsonb,
    updated_at timestamptz DEFAULT now()
);

-- =============================
-- 4. PVP MATCHES & MULTIPLAYER
-- =============================

-- Table: pvp_matches (match metadata)
CREATE TABLE IF NOT EXISTS pvp_matches (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    type text CHECK (type IN ('1v1')),
    status text CHECK (status IN ('pending','waiting','in_progress','completed','declined','cancelled')),
    bet bigint,
    start_time timestamptz,
    end_time timestamptz,
    winner_id uuid REFERENCES profiles(id),
    created_at timestamptz DEFAULT now()
);

-- Table: pvp_match_players (users in matches)
CREATE TABLE IF NOT EXISTS pvp_match_players (
    match_id uuid REFERENCES pvp_matches(id) ON DELETE CASCADE,
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
    score integer DEFAULT 0,
    is_opponent boolean,
    PRIMARY KEY (match_id, user_id)
);

-- Table: match_invitations (invites, counter-bets, etc.)
CREATE TABLE IF NOT EXISTS match_invitations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    inviter_id uuid REFERENCES profiles(id),
    target_player_id uuid REFERENCES profiles(id),
    match_type text,
    proposed_bet bigint,
    status text CHECK (status IN ('pending','accepted','rejected','countered','expired')),
    counter_bet bigint,
    created_at timestamptz DEFAULT now(),
    expires_at timestamptz
);

-- Table: notifications (for real-time updates)
CREATE TABLE IF NOT EXISTS notifications (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
    type text,
    payload jsonb,
    read boolean DEFAULT false,
    created_at timestamptz DEFAULT now()
);

-- =============================
-- 5. REFERRALS & REWARDS
-- =============================

-- Table: referral_codes (unique per user)
CREATE TABLE IF NOT EXISTS referral_codes (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid UNIQUE NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    code text UNIQUE NOT NULL,
    created_at timestamptz DEFAULT now()
);

-- Table: referrals (referrer/referee relationships)
CREATE TABLE IF NOT EXISTS referrals (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    referrer_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    referee_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    joined_at timestamptz DEFAULT now(),
    is_active boolean DEFAULT false,
    reward_claimed boolean DEFAULT false,
    reward_amount bigint DEFAULT 0
);

-- Table: streak_rewards (per-user streak progress)
CREATE TABLE IF NOT EXISTS streak_rewards (
    id serial PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    streak_days integer NOT NULL,
    type text CHECK (type IN ('clicks','multiplier','power_up')),
    value integer,
    description text,
    claimed boolean DEFAULT false
);

-- Table: user_powerups (per-user power-up activations)
CREATE TABLE IF NOT EXISTS user_powerups (
    id serial PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    powerup_type text,
    active boolean DEFAULT false,
    end_time timestamptz,
    multiplier float,
    cooldown integer
);

-- =============================
-- 6. AUDIT LOGS & ACTION TRACKING
-- =============================

-- Table: user_action_logs (security, analytics, anti-cheat)
CREATE TABLE IF NOT EXISTS user_action_logs (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
    action_type text,
    details jsonb,
    created_at timestamptz DEFAULT now()
);

-- Table: game_events (optional, for analytics/debugging)
CREATE TABLE IF NOT EXISTS game_events (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
    event_type text,
    payload jsonb,
    created_at timestamptz DEFAULT now()
);

-- =============================
-- 7. INDEXES & PERFORMANCE
-- =============================

-- Indexes for fast lookups
CREATE INDEX IF NOT EXISTS idx_profiles_wallet_address ON profiles(wallet_address);
CREATE INDEX IF NOT EXISTS idx_user_game_state_user_id ON user_game_state(user_id);
CREATE INDEX IF NOT EXISTS idx_pvp_matches_status ON pvp_matches(status);
CREATE INDEX IF NOT EXISTS idx_referral_codes_code ON referral_codes(code);
CREATE INDEX IF NOT EXISTS idx_referrals_referrer_id ON referrals(referrer_id);
CREATE INDEX IF NOT EXISTS idx_referrals_referee_id ON referrals(referee_id);
CREATE INDEX IF NOT EXISTS idx_user_action_logs_user_id ON user_action_logs(user_id);

-- =============================
-- 8. FUNCTIONS & TRIGGERS
-- =============================

-- Function: update_timestamp (for updated_at columns)
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers: update updated_at on change
CREATE TRIGGER update_profiles_updated_at
BEFORE UPDATE ON profiles
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_user_game_state_updated_at
BEFORE UPDATE ON user_game_state
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_admin_game_config_updated_at
BEFORE UPDATE ON admin_game_config
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Function: grant_referral_reward (auto-grant coins to referrer)
CREATE OR REPLACE FUNCTION grant_referral_reward()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.is_active = true AND OLD.is_active = false THEN
    UPDATE user_game_state
    SET coins = coins + NEW.reward_amount
    WHERE user_id = NEW.referrer_id;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger: referral_reward_trigger
CREATE TRIGGER referral_reward_trigger
AFTER UPDATE OF is_active ON referrals
FOR EACH ROW
WHEN (NEW.is_active = true AND OLD.is_active = false)
EXECUTE FUNCTION grant_referral_reward();

-- =============================
-- 9. ROW-LEVEL SECURITY (RLS) POLICIES
-- =============================

-- Enable RLS on all sensitive tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_game_state ENABLE ROW LEVEL SECURITY;
ALTER TABLE pvp_matches ENABLE ROW LEVEL SECURITY;
ALTER TABLE pvp_match_players ENABLE ROW LEVEL SECURITY;
ALTER TABLE match_invitations ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE referral_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE referrals ENABLE ROW LEVEL SECURITY;
ALTER TABLE streak_rewards ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_powerups ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_action_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_game_config ENABLE ROW LEVEL SECURITY;

-- RLS: profiles (users can see/update their own profile)
CREATE POLICY profiles_select_self ON profiles
  FOR SELECT USING (id = auth.uid());
CREATE POLICY profiles_update_self ON profiles
  FOR UPDATE USING (id = auth.uid());

-- RLS: user_game_state (users can see/update their own state)
CREATE POLICY user_game_state_select_self ON user_game_state
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY user_game_state_update_self ON user_game_state
  FOR UPDATE USING (user_id = auth.uid());

-- RLS: pvp_matches (participants can see, admins can see all)
CREATE POLICY pvp_matches_select_participant ON pvp_matches
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM pvp_match_players
      WHERE pvp_match_players.match_id = pvp_matches.id
        AND pvp_match_players.user_id = auth.uid()
    )
    OR auth.role() = 'admin'
  );

-- RLS: pvp_match_players (users can see their own rows)
CREATE POLICY pvp_match_players_select_self ON pvp_match_players
  FOR SELECT USING (user_id = auth.uid());

-- RLS: match_invitations (inviter/target can see, update their own)
CREATE POLICY match_invitations_select_self ON match_invitations
  FOR SELECT USING (inviter_id = auth.uid() OR target_player_id = auth.uid());
CREATE POLICY match_invitations_update_self ON match_invitations
  FOR UPDATE USING (inviter_id = auth.uid() OR target_player_id = auth.uid());

-- RLS: notifications (users can see their own notifications)
CREATE POLICY notifications_select_self ON notifications
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY notifications_update_self ON notifications
  FOR UPDATE USING (user_id = auth.uid());

-- RLS: referral_codes (users can see/update their own code)
CREATE POLICY referral_codes_select_self ON referral_codes
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY referral_codes_update_self ON referral_codes
  FOR UPDATE USING (user_id = auth.uid());

-- RLS: referrals (referrer/referee can see, update their own)
CREATE POLICY referrals_select_self ON referrals
  FOR SELECT USING (referrer_id = auth.uid() OR referee_id = auth.uid());
CREATE POLICY referrals_update_self ON referrals
  FOR UPDATE USING (referrer_id = auth.uid() OR referee_id = auth.uid());

-- RLS: streak_rewards (users can see/update their own rewards)
CREATE POLICY streak_rewards_select_self ON streak_rewards
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY streak_rewards_update_self ON streak_rewards
  FOR UPDATE USING (user_id = auth.uid());

-- RLS: user_powerups (users can see/update their own powerups)
CREATE POLICY user_powerups_select_self ON user_powerups
  FOR SELECT USING (user_id = auth.uid());
CREATE POLICY user_powerups_update_self ON user_powerups
  FOR UPDATE USING (user_id = auth.uid());

-- RLS: user_action_logs (users can see their own logs, admins can see all)
CREATE POLICY user_action_logs_select_self ON user_action_logs
  FOR SELECT USING (user_id = auth.uid() OR auth.role() = 'admin');

-- RLS: admin_game_config (only admins can update, all can read)
CREATE POLICY admin_game_config_select_all ON admin_game_config
  FOR SELECT USING (true);
CREATE POLICY admin_game_config_update_admin ON admin_game_config
  FOR UPDATE USING (auth.role() = 'admin');
CREATE POLICY admin_game_config_insert_admin ON admin_game_config
  FOR INSERT WITH CHECK (auth.role() = 'admin');
CREATE POLICY admin_game_config_delete_admin ON admin_game_config
  FOR DELETE USING (auth.role() = 'admin');

-- =============================
-- 10. PUBLIC DATA POLICIES (LEADERBOARDS, ETC.)
-- =============================

-- Example: Allow public read access to leaderboards (derived from user_game_state, profiles)
-- (You may want to create a view for public leaderboards)
CREATE OR REPLACE VIEW public_leaderboard_top_coins AS
SELECT
  p.display_name,
  ugs.coins,
  ugs.total_clicks
FROM profiles p
JOIN user_game_state ugs ON p.id = ugs.user_id
ORDER BY ugs.coins DESC
LIMIT 100;

CREATE OR REPLACE VIEW public_leaderboard_top_streaks AS
SELECT
  p.display_name,
  ugs.streak_days,
  ugs.coins
FROM profiles p
JOIN user_game_state ugs ON p.id = ugs.user_id
ORDER BY ugs.streak_days DESC
LIMIT 100;

CREATE OR REPLACE VIEW public_leaderboard_most_referrals AS
SELECT
  p.display_name,
  COUNT(r.id) AS referral_count
FROM profiles p
LEFT JOIN referral_codes rc ON rc.user_id = p.id
LEFT JOIN referrals r ON r.referrer_id = p.id
GROUP BY p.display_name
ORDER BY referral_count DESC
LIMIT 100;

-- =============================
-- 11. NOTES & EXTENSIBILITY
-- =============================

-- - All sensitive logic (rewards, anti-cheat, admin actions) must be enforced server-side.
-- - Redis is used for high-frequency, low-latency operations (not shown here; see app logic).
-- - This schema is extensible for achievements, badges, analytics, and new game modes.
-- - If any ambiguity or missing detail is found, review the codebase and update the schema as needed.
--
-- END OF MIGRATION SCRIPT

GRANT SELECT ON public_leaderboard_top_coins TO anon;
GRANT SELECT ON public_leaderboard_top_streaks TO anon;
GRANT SELECT ON public_leaderboard_most_referrals TO anon;
